int calc_sub_or(int l, int r, vvi &set_bits)
{
	int orr = 0;
	rep(bit,0,31)
	{
		int cnt = set_bits[r][bit];
		if (l > 0) cnt -= set_bits[l-1][bit];
		if (cnt > 0) orr |= (1<<bit);
	}
	return orr;
}

void solve()
{
	vi a(n);
	vi bits[31];
	rep(i, 0, n)
	{
		rep(bit,0,31)
		{
			if (a[i] & (1<<bit)) bits[bit].pb(i);
		}
	}

	vvi set_bits(n, vi(31, 0));
	rep(i,0,n)
	{
		rep(bit,0,31)
		{
			if (a[i]&(1<<bit)) set_bits[i][bit]++;
		}
	}

	rep(i,1,n)
	{
		rep(bit,0,31) set_bits[i][bit] += set_bits[i-1][bit];
	}

	// using set_bits[][], i can find OR of any subarray

	// OR of subarray [l, r]
	int sbor = calc_sub_or(l, r, set_bits);
  
}
